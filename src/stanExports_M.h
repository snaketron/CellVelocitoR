// Generated by rstantools.  Do not edit by hand.

/*
    cellvel is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    cellvel is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with cellvel.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_M_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 67> locations_array__ =
  {" (found before start of program)",
  " (in 'M', line 10, column 2 to column 26)",
  " (in 'M', line 11, column 2 to column 28)",
  " (in 'M', line 12, column 2 to column 26)",
  " (in 'M', line 13, column 2 to column 28)",
  " (in 'M', line 14, column 2 to column 28)",
  " (in 'M', line 15, column 2 to column 24)",
  " (in 'M', line 16, column 2 to column 28)",
  " (in 'M', line 17, column 2 to column 24)",
  " (in 'M', line 18, column 2 to column 27)",
  " (in 'M', line 19, column 2 to column 27)",
  " (in 'M', line 22, column 2 to column 30)",
  " (in 'M', line 23, column 2 to column 31)",
  " (in 'M', line 24, column 2 to column 33)",
  " (in 'M', line 25, column 2 to column 32)",
  " (in 'M', line 26, column 2 to column 29)",
  " (in 'M', line 27, column 2 to column 29)",
  " (in 'M', line 49, column 2 to column 29)",
  " (in 'M', line 50, column 2 to column 19)",
  " (in 'M', line 28, column 2 to column 48)",
  " (in 'M', line 29, column 2 to column 48)",
  " (in 'M', line 30, column 2 to column 52)",
  " (in 'M', line 31, column 2 to column 52)",
  " (in 'M', line 32, column 2 to column 30)",
  " (in 'M', line 33, column 2 to column 19)",
  " (in 'M', line 51, column 2 to column 40)",
  " (in 'M', line 53, column 4 to column 60)",
  " (in 'M', line 52, column 16 to line 54, column 3)",
  " (in 'M', line 52, column 2 to line 54, column 3)",
  " (in 'M', line 36, column 2 to column 26)",
  " (in 'M', line 37, column 2 to column 28)",
  " (in 'M', line 38, column 2 to column 27)",
  " (in 'M', line 39, column 2 to column 27)",
  " (in 'M', line 40, column 2 to column 23)",
  " (in 'M', line 41, column 2 to column 26)",
  " (in 'M', line 42, column 2 to column 28)",
  " (in 'M', line 43, column 2 to column 27)",
  " (in 'M', line 44, column 2 to column 27)",
  " (in 'M', line 45, column 2 to column 23)",
  " (in 'M', line 46, column 2 to column 31)",
  " (in 'M', line 2, column 2 to column 17)",
  " (in 'M', line 3, column 9 to column 10)",
  " (in 'M', line 3, column 2 to column 14)",
  " (in 'M', line 4, column 9 to column 10)",
  " (in 'M', line 4, column 2 to column 12)",
  " (in 'M', line 5, column 9 to column 15)",
  " (in 'M', line 5, column 2 to column 17)",
  " (in 'M', line 6, column 9 to column 15)",
  " (in 'M', line 6, column 2 to column 17)",
  " (in 'M', line 7, column 9 to column 15)",
  " (in 'M', line 7, column 2 to column 17)",
  " (in 'M', line 10, column 10 to column 16)",
  " (in 'M', line 11, column 10 to column 16)",
  " (in 'M', line 12, column 10 to column 16)",
  " (in 'M', line 13, column 10 to column 16)",
  " (in 'M', line 14, column 10 to column 16)",
  " (in 'M', line 15, column 10 to column 16)",
  " (in 'M', line 16, column 10 to column 16)",
  " (in 'M', line 17, column 10 to column 16)",
  " (in 'M', line 22, column 19 to column 25)",
  " (in 'M', line 23, column 19 to column 25)",
  " (in 'M', line 24, column 19 to column 25)",
  " (in 'M', line 25, column 19 to column 25)",
  " (in 'M', line 26, column 10 to column 16)",
  " (in 'M', line 27, column 10 to column 16)",
  " (in 'M', line 49, column 21 to column 27)",
  " (in 'M', line 50, column 16 to column 17)"};
#include <stan_meta_header.hpp>
class model_M final : public model_base_crtp<model_M> {
private:
  int N;
  Eigen::Matrix<double,-1,1> y_data__;
  std::vector<int> s;
  std::vector<int> g;
  std::vector<int> r;
  std::vector<int> b;
  int eff_rep_1dim__;
  int eff_batch_1dim__;
  int var_rep_1dim__;
  int var_batch_1dim__;
  int eff_group_1dim__;
  int eff_z_1dim__;
  int var_group_1dim__;
  int var_z_1dim__;
  int mu_1dim__;
  int phi_1dim__;
  int alpha_1dim__;
  int beta_1dim__;
  int eff_sample_1dim__;
  int var_sample_1dim__;
  int y_hat_sample_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
public:
  ~model_M() {}
  model_M(stan::io::var_context& context__, unsigned int random_seed__ = 0,
          std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ = "model_M_namespace::model_M";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 40;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 40;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), N);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 42;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 42;
        pos__ = 1;
        current_statement__ = 42;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 42;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 42;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 43;
      stan::math::validate_non_negative_index("s", "N", N);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "s", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      s = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 44;
      s = context__.vals_i("s");
      current_statement__ = 45;
      stan::math::validate_non_negative_index("g", "max(s)",
        stan::math::max(s));
      current_statement__ = 46;
      context__.validate_dims("data initialization", "g", "int",
        std::vector<size_t>{static_cast<size_t>(stan::math::max(s))});
      g = std::vector<int>(stan::math::max(s),
            std::numeric_limits<int>::min());
      current_statement__ = 46;
      g = context__.vals_i("g");
      current_statement__ = 47;
      stan::math::validate_non_negative_index("r", "max(s)",
        stan::math::max(s));
      current_statement__ = 48;
      context__.validate_dims("data initialization", "r", "int",
        std::vector<size_t>{static_cast<size_t>(stan::math::max(s))});
      r = std::vector<int>(stan::math::max(s),
            std::numeric_limits<int>::min());
      current_statement__ = 48;
      r = context__.vals_i("r");
      current_statement__ = 49;
      stan::math::validate_non_negative_index("b", "max(s)",
        stan::math::max(s));
      current_statement__ = 50;
      context__.validate_dims("data initialization", "b", "int",
        std::vector<size_t>{static_cast<size_t>(stan::math::max(s))});
      b = std::vector<int>(stan::math::max(s),
            std::numeric_limits<int>::min());
      current_statement__ = 50;
      b = context__.vals_i("b");
      current_statement__ = 51;
      eff_rep_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 51;
      eff_rep_1dim__ = stan::math::max(r);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("eff_rep", "max(r)",
        eff_rep_1dim__);
      current_statement__ = 52;
      eff_batch_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 52;
      eff_batch_1dim__ = stan::math::max(b);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("eff_batch", "max(b)",
        eff_batch_1dim__);
      current_statement__ = 53;
      var_rep_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 53;
      var_rep_1dim__ = stan::math::max(r);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("var_rep", "max(r)",
        var_rep_1dim__);
      current_statement__ = 54;
      var_batch_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 54;
      var_batch_1dim__ = stan::math::max(b);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("var_batch", "max(b)",
        var_batch_1dim__);
      current_statement__ = 55;
      eff_group_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 55;
      eff_group_1dim__ = stan::math::max(g);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("eff_group", "max(g)",
        eff_group_1dim__);
      current_statement__ = 56;
      eff_z_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 56;
      eff_z_1dim__ = stan::math::max(s);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("eff_z", "max(s)", eff_z_1dim__);
      current_statement__ = 57;
      var_group_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 57;
      var_group_1dim__ = stan::math::max(g);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("var_group", "max(g)",
        var_group_1dim__);
      current_statement__ = 58;
      var_z_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 58;
      var_z_1dim__ = stan::math::max(s);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("var_z", "max(s)", var_z_1dim__);
      current_statement__ = 59;
      mu_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 59;
      mu_1dim__ = stan::math::max(s);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("mu", "max(s)", mu_1dim__);
      current_statement__ = 60;
      phi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 60;
      phi_1dim__ = stan::math::max(s);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("phi", "max(s)", phi_1dim__);
      current_statement__ = 61;
      alpha_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 61;
      alpha_1dim__ = stan::math::max(s);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("alpha", "max(s)", alpha_1dim__);
      current_statement__ = 62;
      beta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 62;
      beta_1dim__ = stan::math::max(s);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("beta", "max(s)", beta_1dim__);
      current_statement__ = 63;
      eff_sample_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 63;
      eff_sample_1dim__ = stan::math::max(s);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("eff_sample", "max(s)",
        eff_sample_1dim__);
      current_statement__ = 64;
      var_sample_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 64;
      var_sample_1dim__ = stan::math::max(s);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("var_sample", "max(s)",
        var_sample_1dim__);
      current_statement__ = 65;
      y_hat_sample_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 65;
      y_hat_sample_1dim__ = stan::math::max(s);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("y_hat_sample", "max(s)",
        y_hat_sample_1dim__);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = eff_rep_1dim__ + eff_batch_1dim__ + var_rep_1dim__ +
      var_batch_1dim__ + eff_group_1dim__ + eff_z_1dim__ + var_group_1dim__ +
      var_z_1dim__ + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_M";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_M_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> eff_rep =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eff_rep_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      eff_rep = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(eff_rep_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> eff_batch =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eff_batch_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      eff_batch = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(eff_batch_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> var_rep =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(var_rep_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      var_rep = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(var_rep_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> var_batch =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(var_batch_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      var_batch = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(var_batch_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> eff_group =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eff_group_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      eff_group = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(eff_group_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> eff_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eff_z_1dim__,
          DUMMY_VAR__);
      current_statement__ = 6;
      eff_z = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(eff_z_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> var_group =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(var_group_1dim__,
          DUMMY_VAR__);
      current_statement__ = 7;
      var_group = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(var_group_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> var_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(var_z_1dim__,
          DUMMY_VAR__);
      current_statement__ = 8;
      var_z = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(var_z_1dim__);
      local_scalar_t__ eff_sigma = DUMMY_VAR__;
      current_statement__ = 9;
      eff_sigma = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      local_scalar_t__ var_sigma = DUMMY_VAR__;
      current_statement__ = 10;
      var_sigma = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(mu_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(phi_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> eff_sample =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eff_sample_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> var_sample =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(var_sample_1dim__,
          DUMMY_VAR__);
      current_statement__ = 19;
      stan::model::assign(var_sample,
        stan::math::add(
          stan::model::rvalue(var_group, "var_group",
            stan::model::index_multi(g)),
          stan::math::multiply(var_sigma, var_z)),
        "assigning variable var_sample");
      current_statement__ = 20;
      stan::model::assign(eff_sample,
        stan::math::add(
          stan::model::rvalue(eff_group, "eff_group",
            stan::model::index_multi(g)),
          stan::math::multiply(eff_sigma, eff_z)),
        "assigning variable eff_sample");
      current_statement__ = 21;
      stan::model::assign(phi,
        stan::math::exp(
          stan::math::add(
            stan::math::add(
              stan::model::rvalue(var_rep, "var_rep",
                stan::model::index_multi(r)),
              stan::model::rvalue(var_batch, "var_batch",
                stan::model::index_multi(b))), var_sample)),
        "assigning variable phi");
      current_statement__ = 22;
      stan::model::assign(mu,
        stan::math::exp(
          stan::math::add(
            stan::math::add(
              stan::model::rvalue(eff_rep, "eff_rep",
                stan::model::index_multi(r)),
              stan::model::rvalue(eff_batch, "eff_batch",
                stan::model::index_multi(b))), eff_sample)),
        "assigning variable mu");
      current_statement__ = 23;
      stan::model::assign(alpha,
        stan::math::elt_divide(stan::math::elt_multiply(mu, mu), phi),
        "assigning variable alpha");
      current_statement__ = 24;
      stan::model::assign(beta, stan::math::elt_divide(mu, phi),
        "assigning variable beta");
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "mu", mu, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "phi", phi, 0);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "alpha", alpha, 0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "beta", beta, 0);
      {
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(eff_rep, -2, 2));
        current_statement__ = 30;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(eff_batch, -2, 2));
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(eff_group, 0, 1));
        current_statement__ = 32;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(eff_sigma, 0, 1));
        current_statement__ = 33;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(eff_z));
        current_statement__ = 34;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(var_rep, -2, 2));
        current_statement__ = 35;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(var_batch, -2, 2));
        current_statement__ = 36;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(var_group, 0, 1));
        current_statement__ = 37;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(var_sigma, 0, 1));
        current_statement__ = 38;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(var_z));
        current_statement__ = 39;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(y,
                         stan::model::rvalue(alpha, "alpha",
                           stan::model::index_multi(s)),
                         stan::model::rvalue(beta, "beta",
                           stan::model::index_multi(s))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_M_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> eff_rep =
        Eigen::Matrix<double,-1,1>::Constant(eff_rep_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      eff_rep = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(eff_rep_1dim__);
      Eigen::Matrix<double,-1,1> eff_batch =
        Eigen::Matrix<double,-1,1>::Constant(eff_batch_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      eff_batch = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(eff_batch_1dim__);
      Eigen::Matrix<double,-1,1> var_rep =
        Eigen::Matrix<double,-1,1>::Constant(var_rep_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      var_rep = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(var_rep_1dim__);
      Eigen::Matrix<double,-1,1> var_batch =
        Eigen::Matrix<double,-1,1>::Constant(var_batch_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      var_batch = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(var_batch_1dim__);
      Eigen::Matrix<double,-1,1> eff_group =
        Eigen::Matrix<double,-1,1>::Constant(eff_group_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      eff_group = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(eff_group_1dim__);
      Eigen::Matrix<double,-1,1> eff_z =
        Eigen::Matrix<double,-1,1>::Constant(eff_z_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      eff_z = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(eff_z_1dim__);
      Eigen::Matrix<double,-1,1> var_group =
        Eigen::Matrix<double,-1,1>::Constant(var_group_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      var_group = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(var_group_1dim__);
      Eigen::Matrix<double,-1,1> var_z =
        Eigen::Matrix<double,-1,1>::Constant(var_z_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      var_z = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(var_z_1dim__);
      double eff_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      eff_sigma = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      double var_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      var_sigma = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(mu_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> phi =
        Eigen::Matrix<double,-1,1>::Constant(phi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(alpha_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(beta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> eff_sample =
        Eigen::Matrix<double,-1,1>::Constant(eff_sample_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> var_sample =
        Eigen::Matrix<double,-1,1>::Constant(var_sample_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(eff_rep);
      out__.write(eff_batch);
      out__.write(var_rep);
      out__.write(var_batch);
      out__.write(eff_group);
      out__.write(eff_z);
      out__.write(var_group);
      out__.write(var_z);
      out__.write(eff_sigma);
      out__.write(var_sigma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 19;
      stan::model::assign(var_sample,
        stan::math::add(
          stan::model::rvalue(var_group, "var_group",
            stan::model::index_multi(g)),
          stan::math::multiply(var_sigma, var_z)),
        "assigning variable var_sample");
      current_statement__ = 20;
      stan::model::assign(eff_sample,
        stan::math::add(
          stan::model::rvalue(eff_group, "eff_group",
            stan::model::index_multi(g)),
          stan::math::multiply(eff_sigma, eff_z)),
        "assigning variable eff_sample");
      current_statement__ = 21;
      stan::model::assign(phi,
        stan::math::exp(
          stan::math::add(
            stan::math::add(
              stan::model::rvalue(var_rep, "var_rep",
                stan::model::index_multi(r)),
              stan::model::rvalue(var_batch, "var_batch",
                stan::model::index_multi(b))), var_sample)),
        "assigning variable phi");
      current_statement__ = 22;
      stan::model::assign(mu,
        stan::math::exp(
          stan::math::add(
            stan::math::add(
              stan::model::rvalue(eff_rep, "eff_rep",
                stan::model::index_multi(r)),
              stan::model::rvalue(eff_batch, "eff_batch",
                stan::model::index_multi(b))), eff_sample)),
        "assigning variable mu");
      current_statement__ = 23;
      stan::model::assign(alpha,
        stan::math::elt_divide(stan::math::elt_multiply(mu, mu), phi),
        "assigning variable alpha");
      current_statement__ = 24;
      stan::model::assign(beta, stan::math::elt_divide(mu, phi),
        "assigning variable beta");
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "mu", mu, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "phi", phi, 0);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "alpha", alpha, 0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "beta", beta, 0);
      if (emit_transformed_parameters__) {
        out__.write(mu);
        out__.write(phi);
        out__.write(alpha);
        out__.write(beta);
        out__.write(eff_sample);
        out__.write(var_sample);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<double> y_hat_sample =
        std::vector<double>(y_hat_sample_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> log_lik =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 25;
      stan::model::assign(y_hat_sample,
        stan::math::gamma_rng(alpha, beta, base_rng__),
        "assigning variable y_hat_sample");
      current_statement__ = 28;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 26;
        stan::model::assign(log_lik,
          stan::math::gamma_lpdf<false>(
            stan::model::rvalue(y, "y", stan::model::index_uni(i)),
            stan::model::rvalue(alpha, "alpha",
              stan::model::index_uni(
                stan::model::rvalue(s, "s", stan::model::index_uni(i)))),
            stan::model::rvalue(beta, "beta",
              stan::model::index_uni(
                stan::model::rvalue(s, "s", stan::model::index_uni(i))))),
          "assigning variable log_lik", stan::model::index_uni(i));
      }
      out__.write(y_hat_sample);
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> eff_rep =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eff_rep_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(eff_rep,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(eff_rep_1dim__),
        "assigning variable eff_rep");
      out__.write(eff_rep);
      Eigen::Matrix<local_scalar_t__,-1,1> eff_batch =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eff_batch_1dim__,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(eff_batch,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(eff_batch_1dim__),
        "assigning variable eff_batch");
      out__.write(eff_batch);
      Eigen::Matrix<local_scalar_t__,-1,1> var_rep =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(var_rep_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(var_rep,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(var_rep_1dim__),
        "assigning variable var_rep");
      out__.write(var_rep);
      Eigen::Matrix<local_scalar_t__,-1,1> var_batch =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(var_batch_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(var_batch,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(var_batch_1dim__),
        "assigning variable var_batch");
      out__.write(var_batch);
      Eigen::Matrix<local_scalar_t__,-1,1> eff_group =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eff_group_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(eff_group,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(eff_group_1dim__),
        "assigning variable eff_group");
      out__.write(eff_group);
      Eigen::Matrix<local_scalar_t__,-1,1> eff_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eff_z_1dim__,
          DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(eff_z,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(eff_z_1dim__),
        "assigning variable eff_z");
      out__.write(eff_z);
      Eigen::Matrix<local_scalar_t__,-1,1> var_group =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(var_group_1dim__,
          DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(var_group,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(var_group_1dim__),
        "assigning variable var_group");
      out__.write(var_group);
      Eigen::Matrix<local_scalar_t__,-1,1> var_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(var_z_1dim__,
          DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(var_z,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(var_z_1dim__),
        "assigning variable var_z");
      out__.write(var_z);
      local_scalar_t__ eff_sigma = DUMMY_VAR__;
      current_statement__ = 9;
      eff_sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, eff_sigma);
      local_scalar_t__ var_sigma = DUMMY_VAR__;
      current_statement__ = 10;
      var_sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, var_sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "eff_rep",
        "double", std::vector<size_t>{static_cast<size_t>(eff_rep_1dim__)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "eff_batch",
        "double", std::vector<size_t>{static_cast<size_t>(eff_batch_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "var_rep",
        "double", std::vector<size_t>{static_cast<size_t>(var_rep_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "var_batch",
        "double", std::vector<size_t>{static_cast<size_t>(var_batch_1dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "eff_group",
        "double", std::vector<size_t>{static_cast<size_t>(eff_group_1dim__)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "eff_z", "double",
        std::vector<size_t>{static_cast<size_t>(eff_z_1dim__)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "var_group",
        "double", std::vector<size_t>{static_cast<size_t>(var_group_1dim__)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "var_z", "double",
        std::vector<size_t>{static_cast<size_t>(var_z_1dim__)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "eff_sigma",
        "double", std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "var_sigma",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> eff_rep =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eff_rep_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> eff_rep_flat__;
        current_statement__ = 1;
        eff_rep_flat__ = context__.vals_r("eff_rep");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= eff_rep_1dim__; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(eff_rep, eff_rep_flat__[(pos__ - 1)],
            "assigning variable eff_rep", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(eff_rep);
      Eigen::Matrix<local_scalar_t__,-1,1> eff_batch =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eff_batch_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> eff_batch_flat__;
        current_statement__ = 2;
        eff_batch_flat__ = context__.vals_r("eff_batch");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= eff_batch_1dim__; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(eff_batch, eff_batch_flat__[(pos__ - 1)],
            "assigning variable eff_batch", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(eff_batch);
      Eigen::Matrix<local_scalar_t__,-1,1> var_rep =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(var_rep_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> var_rep_flat__;
        current_statement__ = 3;
        var_rep_flat__ = context__.vals_r("var_rep");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= var_rep_1dim__; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(var_rep, var_rep_flat__[(pos__ - 1)],
            "assigning variable var_rep", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(var_rep);
      Eigen::Matrix<local_scalar_t__,-1,1> var_batch =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(var_batch_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> var_batch_flat__;
        current_statement__ = 4;
        var_batch_flat__ = context__.vals_r("var_batch");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= var_batch_1dim__; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(var_batch, var_batch_flat__[(pos__ - 1)],
            "assigning variable var_batch", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(var_batch);
      Eigen::Matrix<local_scalar_t__,-1,1> eff_group =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eff_group_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> eff_group_flat__;
        current_statement__ = 5;
        eff_group_flat__ = context__.vals_r("eff_group");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= eff_group_1dim__; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(eff_group, eff_group_flat__[(pos__ - 1)],
            "assigning variable eff_group", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(eff_group);
      Eigen::Matrix<local_scalar_t__,-1,1> eff_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(eff_z_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> eff_z_flat__;
        current_statement__ = 6;
        eff_z_flat__ = context__.vals_r("eff_z");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= eff_z_1dim__; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(eff_z, eff_z_flat__[(pos__ - 1)],
            "assigning variable eff_z", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(eff_z);
      Eigen::Matrix<local_scalar_t__,-1,1> var_group =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(var_group_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> var_group_flat__;
        current_statement__ = 7;
        var_group_flat__ = context__.vals_r("var_group");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= var_group_1dim__; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(var_group, var_group_flat__[(pos__ - 1)],
            "assigning variable var_group", stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(var_group);
      Eigen::Matrix<local_scalar_t__,-1,1> var_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(var_z_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> var_z_flat__;
        current_statement__ = 8;
        var_z_flat__ = context__.vals_r("var_z");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= var_z_1dim__; ++sym1__) {
          current_statement__ = 8;
          stan::model::assign(var_z, var_z_flat__[(pos__ - 1)],
            "assigning variable var_z", stan::model::index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(var_z);
      local_scalar_t__ eff_sigma = DUMMY_VAR__;
      current_statement__ = 9;
      eff_sigma = context__.vals_r("eff_sigma")[(1 - 1)];
      out__.write_free_lb(0, eff_sigma);
      local_scalar_t__ var_sigma = DUMMY_VAR__;
      current_statement__ = 10;
      var_sigma = context__.vals_r("var_sigma")[(1 - 1)];
      out__.write_free_lb(0, var_sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"eff_rep", "eff_batch", "var_rep",
                "var_batch", "eff_group", "eff_z", "var_group", "var_z",
                "eff_sigma", "var_sigma"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"mu", "phi", "alpha", "beta", "eff_sample", "var_sample"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"y_hat_sample", "log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    eff_rep_1dim__)},
                std::vector<size_t>{static_cast<size_t>(eff_batch_1dim__)},
                std::vector<size_t>{static_cast<size_t>(var_rep_1dim__)},
                std::vector<size_t>{static_cast<size_t>(var_batch_1dim__)},
                std::vector<size_t>{static_cast<size_t>(eff_group_1dim__)},
                std::vector<size_t>{static_cast<size_t>(eff_z_1dim__)},
                std::vector<size_t>{static_cast<size_t>(var_group_1dim__)},
                std::vector<size_t>{static_cast<size_t>(var_z_1dim__)},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(mu_1dim__)},
             std::vector<size_t>{static_cast<size_t>(phi_1dim__)},
             std::vector<size_t>{static_cast<size_t>(alpha_1dim__)},
             std::vector<size_t>{static_cast<size_t>(beta_1dim__)},
             std::vector<size_t>{static_cast<size_t>(eff_sample_1dim__)},
             std::vector<size_t>{static_cast<size_t>(var_sample_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(y_hat_sample_1dim__)},
             std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= eff_rep_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "eff_rep" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= eff_batch_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "eff_batch" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= var_rep_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "var_rep" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= var_batch_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "var_batch" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= eff_group_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "eff_group" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= eff_z_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "eff_z" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= var_group_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "var_group" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= var_z_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "var_z" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "eff_sigma");
    param_names__.emplace_back(std::string() + "var_sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "phi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= eff_sample_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "eff_sample" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= var_sample_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "var_sample" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= y_hat_sample_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_hat_sample" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= eff_rep_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "eff_rep" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= eff_batch_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "eff_batch" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= var_rep_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "var_rep" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= var_batch_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "var_batch" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= eff_group_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "eff_group" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= eff_z_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "eff_z" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= var_group_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "var_group" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= var_z_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "var_z" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "eff_sigma");
    param_names__.emplace_back(std::string() + "var_sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "phi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= beta_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= eff_sample_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "eff_sample" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= var_sample_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "var_sample" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= y_hat_sample_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_hat_sample" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"eff_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eff_rep_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"eff_batch\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eff_batch_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"var_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(var_rep_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"var_batch\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(var_batch_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"eff_group\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eff_group_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"eff_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eff_z_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"var_group\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(var_group_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"var_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(var_z_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"eff_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"var_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(phi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eff_sample\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eff_sample_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"var_sample\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(var_sample_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat_sample\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_hat_sample_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"eff_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eff_rep_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"eff_batch\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eff_batch_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"var_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(var_rep_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"var_batch\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(var_batch_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"eff_group\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eff_group_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"eff_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eff_z_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"var_group\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(var_group_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"var_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(var_z_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"eff_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"var_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(mu_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(phi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eff_sample\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(eff_sample_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"var_sample\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(var_sample_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat_sample\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_hat_sample_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((eff_rep_1dim__ + eff_batch_1dim__) +
      var_rep_1dim__) + var_batch_1dim__) + eff_group_1dim__) + eff_z_1dim__)
      + var_group_1dim__) + var_z_1dim__) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((mu_1dim__ + phi_1dim__) + alpha_1dim__) + beta_1dim__) +
      eff_sample_1dim__) + var_sample_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((y_hat_sample_1dim__ + N));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((eff_rep_1dim__ + eff_batch_1dim__) +
      var_rep_1dim__) + var_batch_1dim__) + eff_group_1dim__) + eff_z_1dim__)
      + var_group_1dim__) + var_z_1dim__) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((mu_1dim__ + phi_1dim__) + alpha_1dim__) + beta_1dim__) +
      eff_sample_1dim__) + var_sample_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((y_hat_sample_1dim__ + N));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_M_namespace::model_M;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_M_namespace::profiles__;
}
#endif
#endif
